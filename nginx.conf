events {
    worker_connections 1024;
}

http {
    # Define upstream servers (API Gateway instances)
    upstream api_gateways {
        # Round-robin load balancing (default)
        server api-gateway-1:3000;
        server api-gateway-2:3000;
        server api-gateway-3:3000;
        
        # Health checks
        # keepalive connections for better performance
        keepalive 32;
    }    # Rate limiting removed - handled by Redis in API Gateway

    # Log format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'upstream: $upstream_addr response_time: $upstream_response_time';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    # Main server configuration
    server {
        listen 80;
        server_name api.localhost;

        # Health check endpoint for the load balancer itself
        location /nginx-health {
            access_log off;
            return 200 "NGINX Load Balancer OK\n";
            add_header Content-Type text/plain;
        }        # Auth endpoints - rate limiting handled by Redis in API Gateway
        location /api/auth/ {
            proxy_pass http://api_gateways;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Load-Balancer nginx;
            
            # Connection settings
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
            
            # Enable HTTP/1.1 for keepalive
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }        # General endpoints - rate limiting handled by Redis in API Gateway
        location / {
            proxy_pass http://api_gateways;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Load-Balancer nginx;
            
            # Connection settings
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
            
            # Enable HTTP/1.1 for keepalive
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }        # Error pages
        error_page 502 503 504 @upstream_error;
        location @upstream_error {
            add_header Content-Type application/json always;
            return 502 '{"error": "Service temporarily unavailable", "message": "Please try again later"}';
        }
    }
}
